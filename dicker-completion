#!/bin/bash
_strip_compreply_colons() {
  if [ "${1#*:}" = "${1}" ]; then
    return 0
  else
    local n
    for ((n=0; n<${#COMPREPLY[@]}; n++)); do
      COMPREPLY[$n]="${COMPREPLY[n]#*:}"
    done
  fi
}

_comp_dicker_arg_image() {
  COMPREPLY+=( $(compgen -W "$(docker images --format '{{ if not (eq .Tag "<none>")  }}{{.Repository}}:{{.Tag}}{{end }} {{.Repository}}:{{.ID}} {{.ID}}')" -- ${cur}) )
  _strip_compreply_colons "${cur}"
}

_comp_dicker_logs() {
  case "${cur}" in
    -*)
      COMPREPLY+=( $(compgen -W "--follow -f --glob -g --line -n --help" -- "${cur}"))
      return 0
      ;;
    *)
      COMPREPLY+=( $(compgen -W "$( docker ps -a --format '{{.Names}}') $( docker ps -a --format '{{.ID}}')" -- ${cur}) )
  esac
}

_comp_dicker_join-str() {
  delimiter="$1"
  shift
  OUTPUT=""
  for ((n=1; n<=$#; n++)); do
    if [ "$n" -ne 1 ]; then
      OUTPUT+="${delimiter}"
    fi
    OUTPUT+="${!n}"
  done
  echo -n "$OUTPUT"
}

_comp_dicker_ps() {
  case "${cur}" in
    -*)
      COMPREPLY+=( $(compgen -W "--all -a --filter -f --image -i --columns -c --no-header --no-align --help" -- "${cur}"))
      return 0
      ;;
  esac

  case "${prev}" in
    -i|--image)
      _comp_dicker_arg_image
      return 0
      ;;
    -c|--columns)
      local cols curcol others n
      cols=($(echo "$cur" | tr ',' ' '))
      if [ ! ${#cols[@]} = 0 ]; then
        if [ "${cur:${#cur}-1}" = "," ]; then
          cols+=("")
        fi

        curcol=${cols[${#cols[@]}-1]}
        others=$(_comp_dicker_join-str , "${cols[@]:0:${#cols[@]}-1}")
      else
        others=""
        curcol=""
      fi

      COMPREPLY+=( $(compgen -W "default name id image started finished state network ip ips upper-path app-id launcher task-id mesos-task-id marathon-app-id forwards" -- "${curcol}"))
      if [ ! -z "$others" ]; then
        for ((n=0; n<${#COMPREPLY[@]}; n++)); do
          COMPREPLY[$n]="$others,${COMPREPLY[n]}"
        done
      fi

      return 0
      ;;
  esac
}

_comp_dicker_join() {
  case "${cur}" in
    -*)
      COMPREPLY+=( $(compgen -W "--help" -- "${cur}"))
      return 0
      ;;
    *)
      COMPREPLY+=( $(compgen -W "$( docker ps --format '{{.Names}}') $( docker ps --format '{{.ID}}')" -- ${cur}) )
  esac
}

_comp_dicker_url() {
  case "${cur}" in
    -*)
      COMPREPLY+=( $(compgen -W "--help" -- "${cur}"))
      return 0
      ;;
    *)
      COMPREPLY+=( $(compgen -W "$( docker ps -a --format '{{.Names}}') $( docker ps -a --format '{{.ID}}')" -- ${cur}) )
  esac
}

_comp_dicker_sandbox() {
  case "${cur}" in
    -*)
      COMPREPLY+=( $(compgen -W "-u --url --help" -- "${cur}"))
      return 0
      ;;
    *)
      COMPREPLY+=( $(compgen -W "$( docker ps -a --format '{{.Names}}') $( docker ps -a --format '{{.ID}}')" -- ${cur}) )
  esac
}


_comp_dicker() {
  local cur prev words cword
  _init_completion -n : || return
  COMPREPLY=()

  if [ ${COMP_CWORD} = 1 ]; then
    COMPREPLY=( $(compgen -W "logs ps sandbox url join" -- ${cur}) )
    return 0
  fi

  cmd=${COMP_WORDS[1]}

  case "$cmd" in
    logs)
      _comp_dicker_logs
      ;;
    ps)
      _comp_dicker_ps
      ;;
    join)
      _comp_dicker_join
      ;;
    url)
      _comp_dicker_url
      ;;
    sandbox)
      _comp_dicker_sandbox
      ;;
    *)
      return 0
      ;;
  esac

}
complete  -o nospace -o bashdefault -F _comp_dicker dicker
complete  -o nospace -o bashdefault -F _comp_dicker dr
